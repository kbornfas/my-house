generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(uuid())
  email                     String    @unique
  passwordHash              String
  fullName                  String?
  phoneNumber               String?
  notificationPreferences   Json?
  devices                   Device[]
  refreshTokens             RefreshToken[]
  shoppingLists             ShoppingList[]
  notificationLogs          NotificationLog[]
  bills                     Bill[]
  reminders                 Reminder[]
  calendarAccounts          CalendarAccount[]
  calendarEvents            CalendarEvent[]
  mealOverrides             UserMealOverride[]
  preferences               UserPreferences?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model Device {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  fcmToken  String   @db.Text
  platform  String?
  lastSeen  DateTime @default(now())
  isActive  Boolean  @default(true)
}

model RefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tokenHash  String
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Bill {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  name        String
  amount      Decimal
  color       String    @default("#a855f7")
  category    String?
  dueDate     DateTime
  recurrence  String?
  status      String    @default("unpaid")
  paymentMethod String?
  notes       String?
  autoPay     Boolean   @default(false)
  payments    BillPayment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BillPayment {
  id                String   @id @default(uuid())
  bill              Bill     @relation(fields: [billId], references: [id])
  billId            String
  amountPaid        Decimal
  paymentDate       DateTime
  paymentMethod     String?
  confirmationNumber String?
  createdAt         DateTime @default(now())
}

model ShoppingList {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  name      String
  items     ShoppingItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShoppingItem {
  id         String  @id @default(uuid())
  list       ShoppingList @relation(fields: [listId], references: [id])
  listId     String
  name       String
  quantity   Int     @default(1)
  unit       String?
  category   String?
  color      String  @default("#10b981")
  price      Decimal?
  isPurchased Boolean @default(false)
  notes      String?
  priority   String  @default("normal")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Reminder {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  title            String
  description      String?
  color            String   @default("#f59e0b")
  reminderTime     DateTime
  recurrence       String?
  category         String?
  isCompleted      Boolean  @default(false)
  notificationSent Boolean  @default(false)
  snoozeUntil      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model NotificationLog {
  id          String   @id @default(uuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  type        String?
  referenceId String?
  sentAt      DateTime @default(now())
  status      String?
  platform    String?
  attemptCount Int     @default(0)
  lastError   String?
}

model CalendarAccount {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  provider        String
  externalId      String
  email           String?
  label           String?
  accessTokenEnc  String          @db.Text
  refreshTokenEnc String?         @db.Text
  expiresAt       DateTime?
  lastSyncedAt    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  events          CalendarEvent[]

  @@unique([provider, externalId])
}

model CalendarEvent {
  id          String            @id @default(uuid())
  account     CalendarAccount?  @relation(fields: [accountId], references: [id])
  accountId   String?
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  externalId  String?
  summary     String?
  description String?
  startsAt    DateTime
  endsAt      DateTime
  location    String?
  source      String?
  isHoliday   Boolean           @default(false)
  isMeal      Boolean           @default(false)
  metadata    Json?
  holiday     Holiday?          @relation(fields: [holidayId], references: [id])
  holidayId   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([userId, startsAt])
  @@unique([accountId, externalId])
}

model Holiday {
  id          String              @id @default(uuid())
  countryCode String
  name        String
  date        DateTime
  type        String?
  rawPayload  Json?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  events      CalendarEvent[]
  mealPlans   UserMealOverride[]

  @@unique([countryCode, date, name])
  @@index([date])
}

model MealPlanTemplate {
  id         String   @id @default(uuid())
  dateKey    String
  type       String   @default("standard")
  calories   Int?
  macros     Json?
  courses    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([dateKey, type])
}

model UserMealOverride {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  dateKey    String
  holiday    Holiday? @relation(fields: [holidayId], references: [id])
  holidayId  String?
  courses    Json
  calories   Int?
  macros     Json?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, dateKey, holidayId])
  @@index([userId, dateKey])
}

model UserPreferences {
  id                   String  @id @default(uuid())
  user                 User    @relation(fields: [userId], references: [id])
  userId               String  @unique
  timezone             String  @default("UTC")
  locale               String  @default("en-US")
  dietaryRestrictions  Json?
  caloricGoal          Int?
  macros               Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
